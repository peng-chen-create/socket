#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <syslog.h>
#include <uci.h>
#include <libubox/uloop.h>
#include <libubox/usock.h>
#include <linux/filter.h>
#include <signal.h>
#include <errno.h>
#include <linux/if_packet.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <linux/if.h>
#include <linux/types.h>
#include <linux/if_ether.h>
#include <linux/ip.h>
#include <linux/udp.h>
#include "gs_utils.h"
#define MAC_LEN1 14 
#define MAC_LEN2 18
#define VLAN_TYPE 0x8100 
#define IP_TYPE 0x0800
#define PORT 5353
const    char* app_name="mdns";
void ip_address(struct iphdr* ip)
{
    unsigned char* p = (unsigned char*)&ip->saddr;
    printf("Source IP\t: %u.%u.%u.%u\n",p[0],p[1],p[2],p[3]);
    p = (unsigned char*)&ip->daddr;
    printf("Destination IP\t: %u.%u.%u.%u\n",p[0],p[1],p[2],p[3]);
}
int main(void)
{
	int sockfd, len, ret, ifindex;
    unsigned short iph_len;
	struct iphdr *ipheader;
    struct udphdr *udpheader;
    struct sockaddr_ll dest_sll;

	char buf[1024];
	ssize_t n;
	//struct vlan_ethhdr *vlanheader;
	/* capture ip datagram without ethernet header */
	if ((sockfd = socket(PF_PACKET,    SOCK_RAW, htons(ETH_P_ALL)))== -1)
	{        
		printf("socket error!\n");
		return 1;
	}
    ret = gs_get_ifindex_byname( "br-lan0_ex", &ifindex );
    memset(&dest_sll, 0x00, sizeof(dest_sll));
    dest_sll.sll_family = AF_PACKET;
    dest_sll.sll_protocol = htons( ETH_P_IP );
    dest_sll.sll_ifindex = ifindex;
//    if ( ret = bind(sockfd, (struct sockaddr *)&dest_sll, sizeof(dest_sll)) < 0 )
//    {
//        printf("bind err\n");
//    }
    while (1)
    {
        memset(buf, 0x00, sizeof(buf));
        ret = recv(sockfd, buf, sizeof(buf), 0);
        printf("buf length is:%d\n", strlen(buf));
        unsigned short *type = (unsigned short*)(buf + 12);
        //printf("type = 0x%04x\n", ntohs(*type));
        if (ntohs(*type) == VLAN_TYPE)
        {
            //printf("vlan_type == 0x%04x\n", ntohs(*type));
            len = MAC_LEN2;
            unsigned short *vlan_id = (unsigned short*)(buf + 14);
            //printf("Vlan ID:%u\n", ntohs(*vlan_id));
            unsigned short *protocol = (unsigned short*)(buf + 16);
            if (ntohs(*protocol) == IP_TYPE)
            {
                //printf("ip_type == 0x%04x\n", ntohs(*protocol));
                ipheader = (struct iphdr *)(buf + MAC_LEN2);
                //ip_address(ipheader);
                iph_len = ipheader->ihl * 4;
                if (ipheader->protocol == IPPROTO_UDP)
                {
                    udpheader = (struct udphdr *)(buf + MAC_LEN2 + iph_len);
                    unsigned short s_port = udpheader->source;
                    unsigned short d_port = udpheader->dest;
                    //printf("Source prot:%u\n", ntohs(s_port));
                    //printf("Destion port:%u\n", ntohs(d_port));
                    if (ntohs(s_port) == PORT && ntohs(s_port))
                    {

                        printf("vlan_type == 0x%04x\n", ntohs(*type));
                        printf("Vlan ID:%u\n", ntohs(*vlan_id));
                        printf("ip_type == 0x%04x\n", ntohs(*protocol));
                        ip_address(ipheader);
                        printf("Source prot:%u\n", ntohs(s_port));
                        printf("Destion port:%u\n", ntohs(d_port));
                        unsigned short p = 10;
                        *vlan_id = htons(p);
                        printf("buf length is:%d\n", strlen(buf));
                        ret = sendto(sockfd, buf, strlen(buf), 0, (struct sockaddr *) &dest_sll, sizeof(dest_sll) );
                        if (ret < 0)
                        {
                            printf("send err\n");
                        }
                        else 
                        {
                            printf("send success\n");
                        }
                    }
                }
            }
        }
        sleep(2);
    }
}
